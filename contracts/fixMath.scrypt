library FixMath {
  /**
  * Fixed Point implementations of log, log2, log10 and exp.
  * Only works for positive numbers.
  *
  * Adapted from https://github.com/PetteriAimonen/libfixmath
  */

  static int precision = 16;
  static int scale = 65536; // 2 ^ precision
  static int scale2 = 1048576; // 2 ** (precision + 4); For better accuracy of log and log10

  static int ln2 = 726817; // log(x) * scale2 / log2(x)
  static int ln10 = 315653; // log10(x) * scale2 / log2(x)

  static int fixE = 178145; // e * scale

  /**
  * Works for numbers between 100 and 0.001
  */
  static function log2(int x) : int {
    if (x > 6553600 || x < 66) {
      // exit(false); // loops arent sufficient;
      require(false); // exit only returns 0
    }

    int b = 32768;
    int y = 0;

    // If less than 1
    loop (10) {
      if (x < FixMath.scale) {
        x = x * 2;
        y = y - FixMath.scale;
      }
    }

    // If more than 1
    loop (10) {
      if (x >= 2 * FixMath.scale) {
        x = x / 2;
        y = y + FixMath.scale;
      }
    }

    int z = x;

    // loop precision times
    loop (16) {
      z = z * z / FixMath.scale;
      if (z >= 2 * FixMath.scale) {
        z = z / 2;
        y = y + b;
      }

      b = b / 2;
    }

    return y;
  }

  static function log(int x) : int {
    return FixMath.log2(x) * FixMath.ln2 / FixMath.scale2;
  }

  static function log10(int x) : int {
    return FixMath.log2(x) * FixMath.ln10 / FixMath.scale2;
  }

  static function exp(int x) : int {
    if (x >= 681391 || x <= -772243) require(false); // TODO: Appropriate limits?

    int result = 0;

    if (x == 0) {
      result = scale;
    }
    else if (x == scale) {
      result = fixE;
    } else {
      result = x + scale;
      int term = x;
      int i = 2;
      bool break = false;

      loop (29) {
        // TODO: Repititions should be relative to precision
        if (! break) {
          term = (term * x) / (i * scale);
          result += term;

          if (term < 500 && (i > 15 || term < 20)) {
            break = true;
          }

          i++;
        }
      }

    }

    return result;
  }
}
