import "ec.scrypt";

// Schnorr signatures verification for secp256k1
contract Schnorr {
    // convert a public key to a point, assuming it's uncompressed
    static function pubKey2Point(PubKey pubKey) : Point {
        require(pubKey[: 1] == b'04');
        //convert signed little endian to unsigned big endian
        int x = Utils.fromLEUnsigned(reverseBytes(pubKey[1 : 33], 32));
        int y = Utils.fromLEUnsigned(reverseBytes(pubKey[33 : 65], 32));
        return {x, y};
    }

    //s * G = R + hash(r, P, m) * P
    public function verify(Sig sig, PubKey pubKey, bytes msg, Point R) {
        bytes r = sig[ : 32];
        int s = unpack(reverseBytes(sig[32 : 64], 32) + b'00');

        // e = Hash(r || P || msg)
        int e = unpack(reverseBytes(sha256(r + pubKey + msg), 32) + b'00');
        e = EC.modReduce(e, EC.n);

        // E = e * P
        //         P
        Point P = pubKey2Point(pubKey);
        Point E = EC.multByScalar(P, e);

        // A = R + E
        Point A = EC.addPoints(R, E);

        // S = s * G
        Point S = EC.multGeneratorByScalar(s);

        require(S == A);
    }
}
