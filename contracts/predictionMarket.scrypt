import "util.scrypt";
import "./lmsr.scrypt";
import "./merkleTree.scrypt";

contract PM {
  // PubKey[] minerKeys; // PubKeys of voting miners
  // int[] minerVotes; // Must add to 100
  // TODO: fee for liquidity providers?
  // TODO: Fee for myself
  static int satScalingAdjust = 32768;

  public function addLiquidity() {
    require(true);
  }

  public function buy(SigHashPreimage txPreimage,
    int sharesFor,
    int sharesAgainst,
    Ripemd160 changePKH,
    Ripemd160 payoutPKH,
    int changeSats,
    int prevLmsrBalance,
    int newLmsrBalance,
    bytes prevLmsrMerklePath,
    bytes newLmsrMerklePath,
    bytes lastEntry,
    bytes lastMerklePath) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(sharesFor >= 0);
    require(sharesAgainst >= 0);
    require(sharesFor + sharesAgainst > 0);

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    bytes balanceTableRoot = scriptCode[scriptLen - 32 : ];
    bytes shareStatus = scriptCode[scriptLen - 35 : scriptLen - 32];

    int liquidity = unpack(shareStatus[ : 1]);
    int prevSharesFor = unpack(shareStatus[1 : 2]);
    int prevSharesAgainst = unpack(shareStatus[2 : 3]);

    int newSharesFor = prevSharesFor + sharesFor;
    int newSharesAgainst = prevSharesAgainst + sharesAgainst;

    require(LMSR.validate(liquidity,
        prevSharesFor,
        prevSharesAgainst,
        prevLmsrBalance,
        prevLmsrMerklePath));
    // require(LMSR.validate(liquidity,
    //     newSharesFor,
    //     newSharesAgainst,
    //     newLmsrBalance,
    //     newLmsrMerklePath));

    // bytes newLeaf = sha256(payoutPKH + num2bin(sharesFor, 1) + num2bin(sharesAgainst, 1));
    // bytes newBalanceTableRoot = MerkleTree.addLeafSafe(lastEntry,
    //   lastMerklePath,
    //   balanceTableRoot,
    //   newLeaf);

    // bytes newSharesStatus = shareStatus[ : 1] + num2bin(newSharesFor, 1) + num2bin(newSharesAgainst, 1);
    // bytes newScriptCode = scriptCode[ : scriptLen - 35] + newSharesStatus + newBalanceTableRoot;

    // int cost = newLmsrBalance / satScalingAdjust - prevLmsrBalance / satScalingAdjust;
    // int scaledCost = cost / 32768;
    // int newBalance = Util.value(txPreimage) + scaledCost;

    // bytes marketOutput = Util.buildOutput(newScriptCode, newBalance);

    // // Expect the additional CHANGE output
    // bytes changeScript = Util.buildPublicKeyHashScript(changePKH);
    // bytes changeOutput = Util.buildOutput(changeScript, changeSats);

    // Sha256 hashOutputs = hash256(marketOutput + changeOutput);

    // require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  // public function sell(bytes txPreimage, int amount, Ripemd160 changePKH, int changeSats) {
  //   require(true);

  // }

  // public function redeem(bytes txPreimage, int amount, Ripemd160 payoutPKH, Sig[] minerSigs) {
  //   require(true);
  // }

  // function isDecided(Sig[] minerSigs) : bool {
  //   // TODO: Determine if majority of hashpower voted
  //   return false;
  // }
}
