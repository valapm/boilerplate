import "util.scrypt";
import "./lmsr.scrypt";
import "./merkleTree.scrypt";
import "./rabin.scrypt";

contract PM {
  bytes minerKeys;

  // TODO: Variable fee per trade for market creator
  // TODO: Flat fee per trade for myself
  // TODO: Multiple event outcomes

  static int satScaling = 1048576;
  static int satScalingAdjust = 32768;
  static int rabinSigN = 0;

  // Oracles
  static int rabinKeyLength = 126;
  static int oracleLength = 127; // rabin key + 1 byte
  static int signatureLength = 128; // rabin key + 2 bytes

  public function addEntry(SigHashPreimage txPreimage,
    int liquidity,
    int sharesFor,
    int sharesAgainst,
    PubKey publicKey,
    int newLmsrBalance,
    bytes newLmsrMerklePath,
    bytes lastEntry,
    bytes lastMerklePath) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(liquidity >= 0);
    require(sharesFor >= 0);
    require(sharesAgainst >= 0);

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    bytes balanceTableRoot = scriptCode[scriptLen - 32 : ];
    bytes shareStatus = scriptCode[scriptLen - 35 : scriptLen - 32];

    int prevLiquidity = unpack(shareStatus[ : 1]);
    int prevSharesFor = unpack(shareStatus[1 : 2]);
    int prevSharesAgainst = unpack(shareStatus[2 : 3]);

    int newLiquidity = prevLiquidity + liquidity;
    int newSharesFor = prevSharesFor + sharesFor;
    int newSharesAgainst = prevSharesAgainst + sharesAgainst;

    require(LMSR.validate(newLiquidity,
        newSharesFor,
        newSharesAgainst,
        newLmsrBalance,
        newLmsrMerklePath));

    bytes newLeaf = sha256(
      publicKey
      + num2bin(liquidity, 1)
      + num2bin(sharesFor, 1)
      + num2bin(sharesAgainst, 1)
      );

    bytes newBalanceTableRoot = MerkleTree.addLeafSafe(lastEntry,
      lastMerklePath,
      balanceTableRoot,
      newLeaf);

    bytes newSharesStatus = num2bin(newLiquidity, 1)
    + num2bin(newSharesFor, 1)
    + num2bin(newSharesAgainst, 1);
    bytes newScriptCode = scriptCode[ : scriptLen - 35] + newSharesStatus + newBalanceTableRoot;

    int prevBalance = Util.value(txPreimage);

    int newBalance = newLmsrBalance / PM.satScalingAdjust;

    bytes marketOutput = Util.buildOutput(newScriptCode, newBalance);

    require(hash256(marketOutput) == Util.hashOutputs(txPreimage));
  }

  public function updateEntry(SigHashPreimage txPreimage,
    int liquidity,
    int sharesFor,
    int sharesAgainst,
    int prevLiquidity,
    int prevSharesFor,
    int prevSharesAgainst,
    PubKey publicKey,
    Sig signature,
    int newLmsrBalance,
    bytes newLmsrMerklePath,
    bytes merklePath) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(liquidity >= 0);
    require(sharesFor >= 0);
    require(sharesAgainst >= 0);

    require(checkSig(signature, publicKey));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    // Make sure that market isn't closed yet.
    bytes decisionStatus = scriptCode[scriptLen - 37 : scriptLen - 35];
    int isDecided = unpack(decisionStatus[ : 1]);
    require(isDecided == 0);

    bytes balanceTableRoot = scriptCode[scriptLen - 32 : ];
    bytes shareStatus = scriptCode[scriptLen - 35 : scriptLen - 32];

    int prevGlobalLiquidity = unpack(shareStatus[ : 1]);
    int prevGlobalSharesFor = unpack(shareStatus[1 : 2]);
    int prevGlobalSharesAgainst = unpack(shareStatus[2 : 3]);

    int liquidityChange = liquidity - prevLiquidity;
    int sharesForChange = sharesFor - prevSharesFor;
    int sharesAgainstChange = sharesAgainst - prevSharesAgainst;

    int newGlobalLiquidity = prevGlobalLiquidity + liquidityChange;
    int newGlobalSharesFor = prevGlobalSharesFor + sharesForChange;
    int newGlobalSharesAgainst = prevGlobalSharesAgainst + sharesAgainstChange;

    require(LMSR.validate(newGlobalLiquidity,
        newGlobalSharesFor,
        newGlobalSharesAgainst,
        newLmsrBalance,
        newLmsrMerklePath));

    bytes oldLeaf = sha256(
      publicKey
      + num2bin(prevLiquidity, 1)
      + num2bin(prevSharesFor, 1)
      + num2bin(prevSharesAgainst, 1)
      );

    bytes newLeaf = sha256(
      publicKey
      + num2bin(liquidity, 1)
      + num2bin(sharesFor, 1)
      + num2bin(sharesAgainst, 1)
      );

    bytes newBalanceTableRoot = MerkleTree.updateLeaf(oldLeaf,
      newLeaf,
      merklePath,
      balanceTableRoot);

    bytes newSharesStatus = num2bin(newGlobalLiquidity, 1)
    + num2bin(newGlobalSharesFor, 1)
    + num2bin(newGlobalSharesAgainst, 1);
    bytes newScriptCode = scriptCode[ : scriptLen - 35] + newSharesStatus + newBalanceTableRoot;

    int prevBalance = Util.value(txPreimage);

    int newBalance = newLmsrBalance / PM.satScalingAdjust;

    bytes marketOutput = Util.buildOutput(newScriptCode, newBalance);

    require(hash256(marketOutput) == Util.hashOutputs(txPreimage));
  }

  public function redeem(SigHashPreimage txPreimage,
    int prevLiquidity,
    int prevSharesFor,
    int prevSharesAgainst,
    PubKey publicKey,
    Sig signature,
    bytes merklePath) {
    // TODO: Adjust global balance as well.

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    require(checkSig(signature, publicKey));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    bytes decisionStatus = scriptCode[scriptLen - 37 : scriptLen - 35];
    int isDecided = unpack(decisionStatus[ : 1]);
    int decision = unpack(decisionStatus[1 : ]);

    require(isDecided == 1);

    // Verify previous balance
    bytes balanceTableRoot = scriptCode[scriptLen - 32 : ];

    bytes oldLeaf = sha256(
      publicKey
      + num2bin(prevLiquidity, 1)
      + num2bin(prevSharesFor, 1)
      + num2bin(prevSharesAgainst, 1)
      );

    bytes newLeaf = sha256(
      publicKey
      + num2bin(prevLiquidity, 1)
      + num2bin(0, 1)
      + num2bin(0, 1)
      );

    bytes newBalanceTableRoot = MerkleTree.updateLeaf(oldLeaf,
      newLeaf,
      merklePath,
      balanceTableRoot);

    int balance =(decision == 1) ? prevSharesFor : prevSharesAgainst;
    int satBalance = balance * PM.satScaling;

    int newContractBalance = Util.value(txPreimage) - satBalance;

    bytes newScriptCode = scriptCode[ : scriptLen - 32] + newBalanceTableRoot;
    bytes marketOutput = Util.buildOutput(newScriptCode, newContractBalance);

    require(hash256(marketOutput) == Util.hashOutputs(txPreimage));
  }

  public function decide(SigHashPreimage txPreimage,
    int result,
    bytes minerSigs
    ) {

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);

    bytes decisionStatus = scriptCode[scriptLen - 37 : scriptLen - 35];
    int isDecided = unpack(decisionStatus[ : 1]);

    // require(isDecided == 0);
    if (isDecided) exit(false);

    RabinSignature rabin = new RabinSignature();

    int miners = len(this.minerKeys) / oracleLength;
    int minerSigsLen = len(minerSigs) / signatureLength;
    int percentage = 0;
    int i = 0;
    int lastMinerPos = - 1;
    loop (10) {
      if (i < minerSigsLen) {
        int minerPos = unpack(minerSigs[i * signatureLength : i * signatureLength + 1]);

        // Make sure no signature is used twice
        require(minerPos > lastMinerPos);
        lastMinerPos = minerPos;

        int minerPubKey = unpack(this.minerKeys[minerPos * oracleLength : minerPos * oracleLength + rabinKeyLength]);
        int minerSig = unpack(minerSigs[i * signatureLength + 1 : i * signatureLength + rabinKeyLength + 1]);
        int paddingCount = unpack(minerSigs[i * signatureLength + rabinKeyLength + 1 : i * signatureLength + signatureLength]);
        bytes padding = num2bin(0, paddingCount);

        require(rabin.verifySig(minerSig, num2bin(result, 1), padding, minerPubKey));

        percentage = percentage + unpack(this.minerKeys[minerPos * oracleLength + rabinKeyLength : minerPos * oracleLength + oracleLength]);
        i = i + 1;
      }
    }
    require(percentage > 50);

    bytes newDecisionStatus = b'01' + num2bin(result, 1);
    bytes newScriptCode = scriptCode[ : scriptLen - 37] + newDecisionStatus + scriptCode[scriptLen - 35 : ];

    bytes marketOutput = Util.buildOutput(newScriptCode, Util.value(txPreimage));

    require(hash256(marketOutput) == Util.hashOutputs(txPreimage));
  }
}


