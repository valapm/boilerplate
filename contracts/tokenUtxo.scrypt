
/**
 * A token protocol based on UTXO model
 */
contract Token {

    static const int DataLen = 1;

    public function split(Sig senderSig, PubKey receiver0, int tokenAmount0, int satoshiAmount0, PubKey receiver1, int tokenAmount1, int satoshiAmount1, SigHashPreimage txPreimage) {
        require(tokenAmount0 > 0);
        // 1 to 1 transfer when tokenAmount1 is 0
        require(tokenAmount1 >= 0);

        // this ensures the preimage is for the current tx
        require(Tx.checkPreimage(txPreimage));

        // read previous locking script
        // locking script = codePart + OP_RETURN + senderPublicKey + balance0 + balance1
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        int amountStart = scriptLen - DataLen * 2;

        PubKey sender = PubKey(lockingScript[amountStart - Constants.PubKeyLen : amountStart]);
        // authorize
        require(checkSig(senderSig, sender));

        int balance0 = unpack(lockingScript[amountStart : amountStart + DataLen]);
        int balance1 = unpack(lockingScript[amountStart + DataLen :]);

        // split
        require(balance0 + balance1 == tokenAmount0 + tokenAmount1);

        // persist contract code part, including op_return itself
        bytes codePart = lockingScript[: amountStart - Constants.PubKeyLen];

        // setting first balance as 0 is just a convention, not a requirement
        bytes outputScript0 = codePart + receiver0 + num2bin(0, DataLen) + num2bin(tokenAmount0, DataLen);
        bytes output0 = Utils.buildOutput(outputScript0, satoshiAmount0);
        bytes outputScript1 = codePart + receiver1 + num2bin(0, DataLen) + num2bin(tokenAmount1, DataLen);
        bytes output1 = (tokenAmount1 > 0) ? Utils.buildOutput(outputScript1, satoshiAmount1) : b'';
        Sha256 hashOutputs = hash256(output0 + output1);

        require(hashOutputs == SigHash.hashOutputs(txPreimage));
    }

    public function merge(Sig senderSig, PubKey receiver, bytes prevouts, int otherTokenAmount, int satoshiAmount, SigHashPreimage txPreimage) {
        require(otherTokenAmount >= 0);

        // this ensures the preimage is for the current tx
        require(Tx.checkPreimage(txPreimage));

        // this ensures prevouts is the preimage of hashPrevouts
        require(hash256(prevouts) == SigHash.hashPrevouts(txPreimage));
        // each outpoint: 32 byte txid + 4 byte index
        int outpointLen = 36;
        // ensure only two inputs are present
        require(len(prevouts) == 2 * outpointLen);

        // read previous locking script
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        int amountStart = scriptLen - DataLen * 2;

        PubKey sender = PubKey(lockingScript[amountStart - Constants.PubKeyLen : amountStart]);
        // authorize
        require(checkSig(senderSig, sender));

        int balance0 = unpack(lockingScript[amountStart : amountStart + DataLen]);
        int balance1 = unpack(lockingScript[amountStart + DataLen :]);

        // persist contract code part, including op_return itself
        bytes codePart = lockingScript[: amountStart - Constants.PubKeyLen];

        bytes amountPart = (SigHash.outpoint(txPreimage) == prevouts[: outpointLen]) ?
            // input 0
            num2bin(balance0 + balance1, DataLen) + num2bin(otherTokenAmount, DataLen) :
            // input 1
            num2bin(otherTokenAmount, DataLen) + num2bin(balance0 + balance1, DataLen);
        // merge
        bytes outputScript = codePart + receiver + amountPart;
        bytes output = Utils.buildOutput(outputScript, satoshiAmount);
        require(hash256(output) == SigHash.hashOutputs(txPreimage));
    }

    // burn a token back to normal bitcoins
    public function burn(Sig senderSig, PubKeyHash receiverPkh, int satoshiAmount, SigHashPreimage txPreimage) {
        // this ensures the preimage is for the current tx
        require(Tx.checkPreimage(txPreimage));

        // read previous locking script
        // locking script = codePart + OP_RETURN + senderPublicKey + balance0 + balance1
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        int amountStart = scriptLen - DataLen * 2;

        PubKey sender = PubKey(lockingScript[amountStart - Constants.PubKeyLen : amountStart]);
        // authorize
        require(checkSig(senderSig, sender));

        // send to a P2PKH script
        bytes lockingScript_ = Utils.buildPublicKeyHashScript(receiverPkh);
        bytes output = Utils.buildOutput(lockingScript_, satoshiAmount);
        Sha256 hashOutputs = hash256(output);
        require(hashOutputs == SigHash.hashOutputs(txPreimage));
    }
}
