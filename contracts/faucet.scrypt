contract FaucetDeposit {
    public function deposit(SigHashPreimage preImage, int depositAmount, PubKeyHash changePKH, int changeAmount) {
        require(Tx.checkPreimage(preImage));
        require(depositAmount > 0);

        bytes output0 = this.composeOutput0(preImage, depositAmount);
        bytes output1 = this.composeOutput1(changePKH, changeAmount);
        Sha256 hashOutputs = hash256(output0 + output1);
        require(hashOutputs == SigHash.hashOutputs(preImage));
    }

    function composeOutput0(SigHashPreimage preImage, int depositAmount) : bytes {
        bytes lockingScript = SigHash.scriptCode(preImage);
        int contractTotalAmount = SigHash.value(preImage) + depositAmount;
        return Utils.buildOutput(lockingScript, contractTotalAmount);
    }

    function composeOutput1(PubKeyHash changePKH, int changeAmount) : bytes {
        bytes output1 = b'';
        if (changeAmount > 546) {
            output1 = Utils.buildOutput(Utils.buildPublicKeyHashScript(changePKH), changeAmount);
        }
        return output1;
    }
}

contract FaucetWithdraw {
    public function withdraw(SigHashPreimage preImage, PubKeyHash receiverPKH, int changeAmount) {
        require(Tx.checkPreimage(preImage));
        //nLockTime is valid when nSequence < 0xFFFFFFFF https://wiki.bitcoinsv.io/index.php/NLocktime_and_nSequence
        require(SigHash.nSequence(preImage) < 0xffffffff);

        int withdrawAmount = 10000;
        bytes output0 = this.composeOutput0(preImage, changeAmount);
        bytes output1 = this.composeOutput1(receiverPKH, withdrawAmount);
        Sha256 hashOutputs = hash256(output0 + output1);
        require(hashOutputs == SigHash.hashOutputs(preImage));
    }

    function getPrevMatureTime(bytes lockingScript, int scriptLen) : int {
        return unpack(lockingScript[scriptLen - 4 :]);
    }

    function getCodePart(bytes lockingScript, int scriptLen) : bytes {
        return lockingScript[0 : scriptLen - 4];
    }

    function composeOutput0(SigHashPreimage preImage, int changeAmount) : bytes {
        bytes prevLockingScript = SigHash.scriptCode(preImage);
        int scriptLen = len(prevLockingScript);

        int fiveMinutesInSecond = 300;
        int newMatureTime = this.getPrevMatureTime(prevLockingScript, scriptLen) + fiveMinutesInSecond;
        require(SigHash.nLocktime(preImage) == newMatureTime);

        bytes codePart = this.getCodePart(prevLockingScript, scriptLen);
        bytes script = codePart + pack(newMatureTime);
        return Utils.buildOutput(script, changeAmount);
    }

    function composeOutput1(PubKeyHash receiver, int withdrawAmount) : bytes {
        bytes script = Utils.buildPublicKeyHashScript(receiver);
        return Utils.buildOutput(script, withdrawAmount);
    }
}

contract Faucet {
    public function deposit(SigHashPreimage preImage, int depositAmount, PubKeyHash changePKH, int changeAmount) {
        FaucetDeposit depositContract = new FaucetDeposit();
        require(depositContract.deposit(preImage, depositAmount, changePKH, changeAmount));
    }

    public function withdraw(SigHashPreimage preImage, PubKeyHash receiver, int changeAmount) {
        FaucetWithdraw withdrawContract = new FaucetWithdraw();
        require(withdrawContract.withdraw(preImage, receiver, changeAmount));
    }
}
