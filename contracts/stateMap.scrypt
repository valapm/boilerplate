
struct MapEntry {
    SortedItem<int> key;
    int val;
}

contract StateMap {
    @state
    HashedMap<int, int> map;  //Save the serialized data of the map

    // Add key-value pairs to the map
    public function insert(MapEntry entry, SigHashPreimage preimage) {
        require(Tx.checkPreimage(preimage));
        require(this.map.set(entry.key, entry.val));
        require(this.passMap(preimage));
    }

    // update key-value pairs in the map
    public function update(MapEntry entry, SigHashPreimage preimage) {
        require(Tx.checkPreimage(preimage));
        require(this.map.set(entry.key, entry.val));
        require(this.passMap(preimage));
    }

    // delete key-value pairs in the map
    public function delete(SortedItem<int> key, SigHashPreimage preimage) {
        require(Tx.checkPreimage(preimage));
        require(this.map.delete(key));
        // Serialize map, update state
        require(this.passMap(preimage));
    }

    // update state map, and build a output contains new state
    function passMap(SigHashPreimage preimage) : bool {
        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, SigHash.value(preimage));
        return (hash256(output) == SigHash.hashOutputs(preimage));
    }
}
