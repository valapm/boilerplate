import "util.scrypt";

contract OptimalPushTx {
    public function validate(SigHashPreimage txPreimage, bytes prevOutpoints) {
        // 633 bytes
        // require(Tx.checkPreimage(txPreimage));

        // 92 bytes
        require(Tx.checkPreimageOpt_(txPreimage));

        bytes hashPrevOuts = Util.hashPrevouts(txPreimage);
        require(sha256(prevOutpoints) == hashPrevOuts);

        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);
        bytes savedHash  = lockingScript[scriptLen - 10: scriptLen];
        bytes savedOrigin  = lockingScript[scriptLen - 20: scriptLen - 10];

        bytes prevTxId = prevOutpoints[0:32];

        int count = 0;

        if (prevTxId == savedOrigin) {
            newSavedTxId = prevTxId;
        } else {
            newSavedTxId = oldSavedTxId;
            // require(sha256(savedOrigin) == savedHash); // x times
        }

        // bytes newSavedHash = sha256(savedHash + prevTxId);


    }
}
