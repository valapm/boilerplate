
/**
 * A non-fungible token protocol based on UTXO model
 */
contract NonFungibleToken {
    static const int DataLen = 1;
    static const bytes ISSUE = b'00';
    static const bytes TRANSFER = b'01';

    public function issue(Sig issuerSig, PubKey receiver, int satoshiAmount0, int satoshiAmount1, SigHashPreimage txPreimage) {
        // this ensures the preimage is for the current tx
        require(Tx.checkPreimage(txPreimage));

        // read previous locking script: codePart + OP_RETURN + currTokenId + issuer + matchAction
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        // constant part of locking script: upto op_return
        int constStart = scriptLen - DataLen - Constants.PubKeyLen - 1;
        bytes constPart = lockingScript[: constStart];

        bytes matchAction = lockingScript[scriptLen - 1 :];
        // action must be issue
        require(matchAction == NonFungibleToken.ISSUE);

        PubKey issuer = PubKey(lockingScript[constStart + DataLen : scriptLen - 1]);
        // authorize: only the issuer can mint new tokens
        require(checkSig(issuerSig, issuer));

        int currTokenId = unpack(lockingScript[constStart : constStart + DataLen]);

        // increment token ID to mint a new token
        bytes outputScript0 = constPart + num2bin(currTokenId + 1, DataLen) + issuer + NonFungibleToken.ISSUE;
        bytes output0 = Utils.buildOutput(outputScript0, satoshiAmount0);

        // transfer previous token to another receiver
        bytes outputScript1 = constPart + num2bin(currTokenId, DataLen) + receiver + NonFungibleToken.TRANSFER;
        bytes output1 = Utils.buildOutput(outputScript1, satoshiAmount1);

        // check outputs
        Sha256 hashOutputs = hash256(output0 + output1);
        require(hashOutputs == SigHash.hashOutputs(txPreimage));
    }

    public function transfer(Sig senderSig, PubKey receiver, int satoshiAmount, SigHashPreimage txPreimage) {
        require(Tx.checkPreimage(txPreimage));

        // read previous locking script: codePart + OP_RETURN + tokenID + ownerPublicKey + matchAction
        bytes lockingScript = SigHash.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        // constant part of locking script: upto tokenID
        int constStart = scriptLen - Constants.PubKeyLen - 1;
        bytes constPart = lockingScript[: constStart];

        bytes matchAction = lockingScript[scriptLen - 1 :];
        // action must be transfer
        require(matchAction == NonFungibleToken.TRANSFER);

        PubKey sender = PubKey(lockingScript[constStart : scriptLen - 1]);
        // authorize
        require(checkSig(senderSig, sender));

        // transfer
        bytes outputScript = constPart + receiver + NonFungibleToken.TRANSFER;

        bytes output = Utils.buildOutput(outputScript, satoshiAmount);
        require(hash256(output) == SigHash.hashOutputs(txPreimage));
    }
}
